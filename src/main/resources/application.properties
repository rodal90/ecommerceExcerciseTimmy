
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration



# SERVER CONNECTION
# Port to access: http://localhost:8080/
server.port=8080

# Debug information
logging.level.org.springframework.web=debug
logging.level.web=debug

# Application name and context
spring.application.name=timmy
server.servlet.context-path=/timmy

# Fix user and password
#spring.security.user.name=rodri
#spring.security.user.password=rodriPass

# Ensure deletion of session and authentication when logout:
spring.cache.type=NONE

# i18n: better idea put them in WebMvcConfig class:
# spring.messages.basename=i18n/messages 
# spring.messages.encoding=UTF-8

# Disabling cache of thymeleaf.
# If you disable the Thymeleaf cache, the templates will be automatically reloaded when 
# they need to be parsed, it has to do with hot swapping your server-side templates. This is 
# helpful during development because you can instantly see changes to your templates. If 
# not you would have to restart your application.
spring.thymeleaf.cache=false
# Other Thymeleaf properties (values by default):
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix= .html
#spring.thymeleaf.enabled=true
#spring.thymeleaf.encoding=UTF-8
# To change path of templates and static resources
#spring.web.resources.static-locations=classpath:/static-2/
#spring.thymeleaf.prefix=classpath:/templates-5/

# Generate database from @Entity classes
spring.jpa.hibernate.ddl-auto=create-drop
#Generate sql script file from @Entity classes
spring.jpa.properties.jakarta.persistence.schema-generation.create-source=metadata
spring.jpa.properties.jakarta.persistence.schema-generation.database.action=create
spring.jpa.properties.jakarta.persistence.schema-generation.scripts.action=drop-and-create
spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-target=sql/schema.sql
spring.jpa.properties.jakarta.persistence.schema-generation.scripts.drop-target=sql/schema.sql
spring.jpa.properties.hibernate.hbm2ddl.schema-generation.script.append=false
spring.jpa.properties.hibernate.hbm2ddl.drop-source=metadata
spring.jpa.properties.jakarta.persistence.schema-generation.drop-source=metadata


 #CONEXION MEMORIA LOCAL
# Datasource and H2 settings
spring.datasource.url=jdbc:h2:mem:eventix
#If we use a sql script to database initiation:
#spring.datasource.url=jdbc:h2:mem:tienda;INIT=RUNSCRIPT FROM 'classpath:sql/data.sql'
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sas
spring.datasource.password=sas


#CONEXION SQL
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/eventixpro?serverTimezone=Europe/Madrid&createDatabaseIfNotExist=true
#spring.datasource.username=root
#spring.datasource.password=root
#spring.sql.init.platform=mysql





#spring.datasource.password=ENC(yJxxODe+GRTSipHBRTurUQ==)
# Show query in console
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
# NOT NEEDED FOR H2: spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# With ddl-auto=validate, Hibernate test Entities are well mapped to database tables
#spring.jpa.hibernate.ddl-auto=validate
#
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# TimeZone used in BBDD:
spring.jpa.properties.hibernate.jdbc.time_zone=Europe/Madrid
# To initiate schema in every starting of Hibernate
#spring.jpa.defer-datasource-initialization=true
#spring.datasource.url=jdbc:h2:file:/data/demo # If we can save H2 database when finished.
# H2 settings
spring.h2.console.settings.web-allow-others=false
spring.h2.console.settings.trace=false
spring.h2.console.enabled=true
spring.h2.console.path=/h2

# If we're developing a simple CRUD service, it might make sense 
# to use the OSIV, as we may never encounter those performance issues.
# On the other hand, if we find ourselves calling a lot of remote services 
# or there is so much going on outside of our transactional contexts, 
# it's highly recommended to disable the OSIV altogether.
# When in doubt, start without OSIV, since we can easily enable it later. 
# On the other hand, disabling an already enabled OSIV may be cumbersome,
# as we may need to handle a lot of LazyInitializationExceptions.
spring.jpa.open-in-view=true


# To avoid this Console INFO message: Spring Data JDBC - Could not safely identify store 
# assignment for repository candidate interface com.curso.noob.data.repository.IProductRepository; If 
# you want this repository to be a JDBC repository, consider annotating your entities with one of these 
# annotations: org.springframework.data.relational.core.mapping.Table.
# we have to include next line:
spring.data.jdbc.repositories.enabled=false
#
#
# LOGS Configuration:
# By default, levels ERROR, WARN, and INFO messages are logged.
# When the debug mode is enabled (debug=true), a selection of core loggers (embedded container, Hibernate, and Spring Boot) 
# are configured to output more information.
# Alternatively, you can enable a trace mode (trace=true) and doing so enables trace logging for a selection of core
# loggers (embedded container, Hibernate schema generation, and the whole Spring portfolio)
# Examples:
#logging.level.root=info
#logging.level.com.curso.tdd101=info
#logging.level.org.springframework.web=info
#logging.level.org.springframework=info
# File xml with logging configuration for Logback:
#logging.config=classpath:logback-spring.xml
#
# Previous configuration logging file susbtitute next block of properties:
#Log structure for log shown in console:
logging.pattern.console=%yellow(%d{dd-MM-yyyy HH:mm:ss} [%3level]) %green(%msg) %cyan(%replace(%caller{1}){'(Caller\+0\s\s+at)', '>>>'}) 
#
#Log structure for log saved in file:
logging.pattern.file=%d{dd-MM-yyyy HH:mm:ss} %-5level %logger{36} - %msg%n
logging.file.name=logs/curso.log
logging.logback.rollingpolicy.file-name-pattern=logs/curso-%d{dd-MM-yyyy}.%i.log
logging.logback.rollingpolicy.max-file-size=10MB
logging.logback.rollingpolicy.max-history=10
#
